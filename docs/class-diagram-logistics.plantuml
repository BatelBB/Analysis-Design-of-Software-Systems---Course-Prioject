@startuml
title Class Diagram - Logistics Module

package Truckings <<Folder>> {
package DataLayer <<Folder>> {
  class DriverLicencesIDMapper <<Singleton>> {
     -singleton:DriverLicencesIDMapper {static}
     +getInstance():DriverLicencesIDMapper {static}
  }
  class DriverLicencesMapper {
     +getMyLicenses():List<String>
     +addLicence():boolean
  }
  class DriverDTO {
     -id:int
     -licenses:List<String>
     +addLicence():boolean
  }
  abstract class "myDataBase<T>" {
     -finalCurl:String {static}
     -con:Connection {static}
     -JDBCurl:String {static}
     -path:String {static}
     +createNewTable():void
  }
  class TruckingDTO {
     -id:int {final}
     -truckManager:String
     -date:LocalDateTime
     -driverUsername:String
     -vehicleRegistrationPlate:String
     -hours:long
     -minutes:long
     -weight:long
     +updateVehicle():void
     +updateDriverUsername():void
     +updateDate():void
     +updateDriver():void
  }
  class TruckingIDMap <<Singleton>> {
     -singletonTruckingIDMapInstance:TruckingIDMap {static}
     +getInstance():TruckingIDMap {static}
  }
  class TruckingMapper {
     +dateFormat:DateTimeFormatter {final} {static}
     +addTrucking():boolean
     +removeTrucking():boolean
     +setWeightForTrucking():boolean
     +updateVehicle():boolean
     +updateDriver():boolean
     +updateDate():boolean
     +updateSources():boolean
     +updateDestinations():boolean
     +updateProducts():boolean
     +getRegistrationPlateOfTrucking():String
     +getDriverUsernameOfTrucking():int
     +getTruckingByID():TruckingDTO
     +getTruckManagerBoard():List<TruckingDTO>
     +getTruckManagerFutureTruckings():List<TruckingDTO>
     +getTruckManagerHistoryTruckings():List<TruckingDTO>
     +getDriverBoard():List<TruckingDTO>
     +getDriverFutureTruckings():List<TruckingDTO>
     +getDriverHistoryTruckings():List<TruckingDTO>
     +getVehicleBoard():List<TruckingDTO>
     +getVehicleFutureTruckings():List<TruckingDTO>
     +getVehicleHistoryTruckings():List<TruckingDTO>
     +getSourcesByTruckingId():List<SiteDTO>
     +getDestinationsByTruckingId():List<SiteDTO>
     +getProducts:List<ProductForTruckingDTO>
     +removeProductsByTruckingId():boolean
     +existProduct():boolean
     +increaseQuantity():void
     +getQuantityOfProduct():String
     +addSources():List<String>
     +addDestinations():List<String>
     +addProducts():void
     +addProduct():void
  }
  class VehicleMapper {
     +addVehicle():boolean
     +getLicense():String
     +getAllRegistrationPlates():List<String>
     +getVehicle():VehicleDTO
  }
  class VehiclesIDMap <<Singleton>> {
     -singletonVehiclesMapperInstance:VehiclesIDMap {static}
     +getInstance():VehiclesIDMap {static}
  }
  class VehicleDTO {
     -lisence:String
     -registationPlate:String
     -model:String
     -weight:int
     -maxWeight:int
  }
  class SiteDTO {
     -contactGuy:String
     -phoneNumber:String
     -city:String
     -street:String
     -houseNumber:int
     -floor:int
     -apartment:int
     -area:Area
  }
  class ProductForTruckingDTO {
     -product:String
     -quantity:int
  }
  TruckingMapper ..> TruckingIDMap : Use
  DriverLicencesMapper ..> DriverLicencesIDMapper : Use
  VehicleMapper ..> VehiclesIDMap : Use
  TruckingIDMap *-- "0..n" TruckingDTO : hold
  VehiclesIDMap *-- "0..n" VehicleDTO : hold
  DriverLicencesIDMapper *-- "0..n" DriverDTO : hold
}

package BusinessLayer <<Folder>> {
  class TruckManagerController <<Singleton>> {
     -singletonTruckManagerControllerInstance:TruckManagerController {static}
     -truckingIdCounter:int
     +addVehicle():void
     +getVehiclesRegistrationPlates():List<String>
     +addTrucking():void
     +removeTrucking():void
     +printBoard():String
     +printTruckingsHistory():String
     +printFutureTruckings():String
     +printBoardOfDriver():String
     +printTruckingsHistoryOfDriver():String
     +printFutureTruckingsOfDriver():String
     +printBoardOfVehicle():String
     +printTruckingsHistoryOfVehicle():String
     +printFutureTruckingsOfVehicle():String
     +addSourcesToTrucking():List<String>
     +addDestinationsToTrucking():List<String>
     +addProductToTrucking():void
     +updateSourcesOnTrucking():void
     +updateDestinationsOnTrucking():void
     +moveProductsToTrucking():void
     +updateVehicleOnTrucking():void
     +updateDriverOnTrucking():void
     +updateDateOnTrucking():void
  }
  class DriverController <<Singleton>> {
     -singletonDriverControllerInstance:DriverController {static}
     +getInstance():DriverController {static}
     +getMyLicenses():List<String>
     +printMyTruckings():String
     +printMyTruckingsHistory():String
     +printMyFutureTruckings():String
     +addLicense():boolean
     +setWeightForTrucking():boolean
  }
  enum Product {
     Water_7290019056966
     Milk_7290111607400
     Eggs_4902505139314
     +contains():boolean {static}
     +getProductsSKUList():String[] {static}
  }
  enum Area {
     south
     north
     center
     +castStringToArea(String area):Area {static}
  }
  enum DLicense {
     B
     C
     C1
     C_E
     +castStringToDlLicense(String dlicense):DLicense {static}
     +getDLicenseList():String[]
  }
}
TruckManagerController x--> TruckingMapper : uses
TruckManagerController x--> DriverLicencesMapper : uses
TruckManagerController x--> VehicleMapper : uses
DriverController x--> TruckingMapper : uses
DriverController x--> DriverLicencesMapper : uses
DriverController x--> VehicleMapper : uses
TruckingDTO "-destinations" *-- "1..n" SiteDTO
TruckingDTO "-sources" *-- "1..n" SiteDTO
TruckingDTO "-products" *-- "1..n" ProductForTruckingDTO
}
@enduml