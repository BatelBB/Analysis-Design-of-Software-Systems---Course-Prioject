@startuml
title Class Diagram - Shared Module


package shared {
  package shared.presentation {
    class CommandRunner {
      -Service service
    }

    note left: See presentation layer diagram for more information.

    class Application {
      +main()
    }

    Application "1" *-- "1" CommandRunner
  }

  package shared.service {
    class shared.service.Service {
      -Facade facade
      +loadEmployeeDB()
      +deleteEmployeeDB()
      +createShift(): Response<Employee>
      +readEmployee(): Response<Employee>
      +readShift(): Response<List<Shift>>
      +deleteEmployee(): Response<Employee>
      +listEmployees(): Response<List<Employee>>
      +addEmployeeToShift(): Response<Shift>
      +removeEmployeeFromShift() Response<Shift>
      +updateEmployee(): Response<Employee>
      +updateEmployeeShiftPreference(): Response<Employee>
      +listShifts(): Response<List<Shift>>
      +updateRequiredRoleInShift(): Response<Shift>
      +deleteDelivery(): Response<Delivery>
      +listDeliveries(): Response<List<Delivery>>
      +listDeliveriesByDriver(): Response<List<Delivery>>
      +listVehicles(): Response<List<String>>
      +createDelivery(): Response<Delivery>
      +listDeliveriesWithVehicle(): Response<List<Delivery>>
      +updateDelivery(): Response<Delivery>
      +createVehicle(): Response<String>
      +createDriver(): Response<Driver>
      +updateDriver(): Response<Driver>
      +setWeightForDelivery()
    }

    class shared.service.Response<T> {
      -T value
      -String errorMessage
      +isError()
      +getValue()
      +getErrorMessage()
    }

    package shared.service.dto {
      class shared.service.dto.Employee {
        +String id
        +String name
        +Role role
        +String bank
        +int bankID
        +int bankBranch
        +int salaryPerHour
        +int sickDaysUsed
        +int vacationDaysUsed
        +Set<ShiftDateTime> shiftPreferences
        +Calendar employmentStart
      }

      class shared.service.dto.Shift {
        +HashMap<Role, Integer> requiredStaff
        +Calendar date
        +Type type
      }

      class shared.service.dto.Delivery {
        +int id
        +Calendar date
        +Driver driver
        +String vehicleRegistration
        +int totalWeight
        +long durationInMinutes
      }

      class shared.service.dto.Driver {
        +String employeeID
        +Set<License> licenses
      }

      class shared.service.dto.Product {
        +int id
        +int count
      }

      class shared.service.dto.Site {
        +String contactName
        +String contactPhone
        +Area area
        +String city
        +String street
        +int houseNumber
        +int apartment
      }

      shared.service.dto.Delivery "1" *-- "1" shared.service.dto.Driver: Drives
      shared.service.dto.Delivery "1" *-- "*" shared.service.dto.Product: Loaded
      shared.service.dto.Delivery "1" *-- "*" shared.service.dto.Site: From
      shared.service.dto.Delivery "1" *-- "*" shared.service.dto.Site: To

      shared.service.dto.Shift "*" *-- "*" shared.service.dto.Employee: Works

      CommandRunner "1" *-- "1" shared.service.Service
    }
  }

  package shared.business {
    class shared.business.Facade {
      -employees.business.Facade employees
      -logistics.business.Facade logistics
      +loadEmployeeDB()
      +deleteEmployeeDB()
      +createShift(): Response<Employee>
      +readEmployee(): Response<Employee>
      +readShift(): Response<List<Shift>>
      +deleteEmployee(): Response<Employee>
      +listEmployees(): Response<List<Employee>>
      +addEmployeeToShift(): Response<Shift>
      +removeEmployeeFromShift() Response<Shift>
      +updateEmployee(): Response<Employee>
      +updateEmployeeShiftPreference(): Response<Employee>
      +listShifts(): Response<List<Shift>>
      +updateRequiredRoleInShift(): Response<Shift>
      +deleteDelivery(): Response<Delivery>
      +listDeliveries(): Response<List<Delivery>>
      +listDeliveriesByDriver(): Response<List<Delivery>>
      +listVehicles(): Response<List<String>>
      +createDelivery(): Response<Delivery>
      +listDeliveriesWithVehicle(): Response<List<Delivery>>
      +updateDelivery(): Response<Delivery>
      +createVehicle(): Response<String>
      +createDriver(): Response<Driver>
      +updateDriver(): Response<Driver>
      +setWeightForDelivery()
    }

    class shared.business.EmployeeController {
      -employees.business.Facade employees
      +loadEmployeeDB()
      +deleteEmployeeDB()
      +createShift(): Response<Employee>
      +readEmployee(): Response<Employee>
      +readShift(): Response<List<Shift>>
      +deleteEmployee(): Response<Employee>
      +listEmployees(): Response<List<Employee>>
      +addEmployeeToShift(): Response<Shift>
      +removeEmployeeFromShift() Response<Shift>
      +updateEmployee(): Response<Employee>
      +updateEmployeeShiftPreference(): Response<Employee>
      +listShifts(): Response<List<Shift>>
      +updateRequiredRoleInShift(): Response<Shift>
    }

    class shared.business.LogisticsController {
      +deleteDelivery(): Response<Delivery>
      +listDeliveries(): Response<List<Delivery>>
      +listDeliveriesByDriver(): Response<List<Delivery>>
      +listVehicles(): Response<List<String>>
      +createDelivery(): Response<Delivery>
      +listDeliveriesWithVehicle(): Response<List<Delivery>>
      +updateDelivery(): Response<Delivery>
      +createVehicle(): Response<String>
      +createDriver(): Response<Driver>
      +updateDriver(): Response<Driver>
      +setWeightForDelivery()
    }

    shared.business.Facade "1" *-- "1" shared.business.EmployeeController
    shared.business.Facade "1" *-- "1" shared.business.LogisticsController
  }

  shared.service.Service "1" *-- "1" shared.business.Facade
}

package workers {
  package business {
    class Facade {
      -EmployeeController employees
      -ShiftController shifts
      +deleteDB()
      +loadDB()
      +addEmployee(): Employee
      +addShift(): Shift
      +readEmployee(): List<Employee>
      +readShift(): Shift
      +deleteEmployee(): Employee
      +listEmployees(): List<Employee>
      +addEmployeeToShift(): Shift
      +removeEmployeeFromShift(): Shift
      +updateEmployee(): Employee
      +updateEmployeeShiftPreference(): Employee
      +listShifts(): List<Shift>
      +updateRequiredRoleInShift(): Shift
    }

    note left: See workers module diagram for more information.
  }
}


package Truckings <<Folder>> {
package BusinessLayer <<Folder>> {
  class TruckManagerController <<Singleton>> {
     -singletonTruckManagerControllerInstance:TruckManagerController {static}
     -truckingIdCounter:int
     +addVehicle():void
     +getVehiclesRegistrationPlates():List<String>
     +addTrucking():void
     +removeTrucking():void
     +printBoard():String
     +printTruckingsHistory():String
     +printFutureTruckings():String
     +printBoardOfDriver():String
     +printTruckingsHistoryOfDriver():String
     +printFutureTruckingsOfDriver():String
     +printBoardOfVehicle():String
     +printTruckingsHistoryOfVehicle():String
     +printFutureTruckingsOfVehicle():String
     +addSourcesToTrucking():List<String>
     +addDestinationsToTrucking():List<String>
     +addProductToTrucking():void
     +updateSourcesOnTrucking():void
     +updateDestinationsOnTrucking():void
     +moveProductsToTrucking():void
     +updateVehicleOnTrucking():void
     +updateDriverOnTrucking():void
     +updateDateOnTrucking():void
  }

  note left: See logistics module diagram for more information.

  class DriverController <<Singleton>> {
     -singletonDriverControllerInstance:DriverController {static}
     +getInstance():DriverController {static}
     +getMyLicenses():List<String>
     +printMyTruckings():String
     +printMyTruckingsHistory():String
     +printMyFutureTruckings():String
     +addLicense():boolean
     +setWeightForTrucking():boolean
  }
}
}

shared.business.EmployeeController "1" *-- "1" Facade: Uses
shared.business.LogisticsController "1" *-- "1" DriverController: Uses
shared.business.LogisticsController "1" *-- "1" TruckManagerController : Uses
@enduml
