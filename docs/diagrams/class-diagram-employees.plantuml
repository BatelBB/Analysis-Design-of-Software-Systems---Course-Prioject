@startuml
title Class Diagram - Employees Module

package workers {
  package business {
    class Facade {
      -EmployeeController employees
      -ShiftController shifts
      +deleteDB()
      +loadDB()
      +addEmployee(): Employee
      +addShift(): Shift
      +readEmployee(): List<Employee>
      +readShift(): Shift
      +deleteEmployee(): Employee
      +listEmployees(): List<Employee>
      +addEmployeeToShift(): Shift
      +removeEmployeeFromShift(): Shift
      +updateEmployee(): Employee
      +updateEmployeeShiftPreference(): Employee
      +listShifts(): List<Shift>
      +updateRequiredRoleInShift(): Shift
    }

    class EmployeeController {
      -EmployeeRepository repo
      +create(): Employee
      +read(): Employee
      +update(): Employee
      +delete(): Employee
      +list(): List<Employee>
      +setEmployeeShiftsPreference(): Employee
      +isFromHumanResources(): boolean
    }

    class ShiftController {
      -ShiftRepository repo
      +addShifts(): Shift
      +getShift(): Shift
      +ifShiftExist(): boolean
      +listShifts(): List<Shift>
      +setRequiredStaffInShift(): Shift
    }

    Facade "1" *-- "1" EmployeeController: Uses
    Facade "1" *-- "1" ShiftController: Uses
  }

  package data {
    class DALController {
      -ShiftRepository shifts
      -EmployeeRepository employees
      +createTables()
      +load()
      +deleteDataBase()
      +loadDataFromDB()
      +getEmployees(): List<Employee>
      +getEmployee(): Employee
      +addEmployee(): Employee
      +deleteEmployee(): Employee
      +getShifts(): List<Shift>
      +addShift(): Shift
    }

    class Employee {
      -string name
      -string id
      -BankAccount account
      -WorkingConditions conditions
      -Set<ShiftDateTime> availableShifts
      -Role role
      +getId(): String
      +getName(): String
      +getAccount(): BankAccount
      +getConditions(): WorkingConditions
      +getAvailableShifts(): Set<ShiftDateTime>
      +getRole(): Role
      +setName()
      +setId()
      +setRole()
      +addEmployeeShiftPreference()
      +deleteEmployeeShiftPreference()
      +isShiftpreferred(): boolean
    }

    class WorkingConditions {
      -Calendar employmentStart
      -int salaryPerHour
      -int sickDaysUsed
      -int vacationDaysUsed
      +setEmploymentStart()
      +setSalaryPerHour()
      +setSickDaysUsed()
      +setVacationDaysUsed()
      +getEmploymentStart(): Calendar
      +getSalaryPerHour(): int
      +getSickDaysUsed(): int
      +getVacationDaysUsed(): int
    }

    class BankAccount {
      -string bank
      -int bankBranch
      -int bankID
      +setBank()
      +setBankID()
      +setBankBranch()
      +getBank(): String
      +getBankID(): int
      +getBankBranch(): int
    }

    class Shift {
      -Type type
      -Calendar date
      -HashMap<Role, Integer> requiredStaff
      +getType(): Type
      +getDate(): Calendar
      +getStaff(): List<Employee>
      +getRequiredStaff(): HashMap<Role, Integer>
      +setRequiredStaff()
      +setRequiredRoleInShift()
      +isEmployeeWorking(): boolean
      +addEmployee()
      +removeEmployee()
    }

    class EmployeeRepository {
      +getEmployees(): List<Employee>
      +getEmployee(): Employee
      +addEmployee(): Employee
      +deleteEmployee(): Employee
    }

    class ShiftRepository {
      +getShifts(): List<Shift>
      +addShift(): Shift
    }

    EmployeeRepository "1" *-- "*" Employee: Contains
    Employee "1" *-- "1" WorkingConditions: Has
    Employee "1" *-- "1" BankAccount: Has
    ShiftRepository "1" *-- "*" Shift: Contains
    Shift "*" *-- "*" Employee: Works
  }

  ShiftController "1" *-- "1" DALController: Uses
  EmployeeController "1" *-- "1" DALController: Uses
  DALController "1" *-- "1" ShiftRepository: Uses
  DALController "1" *-- "1" EmployeeRepository: Uses
}
@enduml